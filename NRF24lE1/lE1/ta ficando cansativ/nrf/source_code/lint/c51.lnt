-ic:/Keil/C51/INC
-ic:/Keil/C51/INC/Nordic

-si2  // Integer size = 2 bytes
-spN2 // Size of near pointers = 2 bytes
-spF4 // Size of far pointers = 4 bytes

// Formatting options required for uVision IDE
-hsb_3
-format="*** LINT: %(%f(%l) %)%t %n: %m"
-width(0,10) // Don't break lines

-A(C90)  // Use C90 standard

+ppw(warning) // Activate #warning preprocessor command (does not give lint warning if used)
+ppw(message) // Activate #message preprocessor command (does not show up in lint log)

	    // while processing compiler (library) header files ...
-wlib(1)    // sets the warning level within library headers to 1
	    // (no warnings, just syntax errors).  Comment out if you
	    // are actually linting library headers.  This
	    // option makes obsolete options of the form -elib(axxx) where
	    // xxx >= 400 which may be retained for historical reasons.
+v
-elib(652)   // suppress message about #define of earlier declared symbols
-elib(762)   // suppress message about multiple identical declarations and
-elib(760)   // suppress message about multiple identical macro defs
+rw(_bit)                 // activate the _bit datatype
+rw(boolx)                 // activate the bool datatype
+rw(_gobble)              // activate the _gobble keyword
                          // causes _gobble token to be both ignored
-dinterrupt=_gobble       // defines interrupt to be a _gobble
-dusing=_gobble           // defines using to be a _gobble
-d_at_=_gobble            // defines _at_ to be a _gobble
+rw(_ignore_init)         // activate this keyword
+rw(__declspec)           // activate this MS keyword
-d"bit=__declspec(selectany) _bit"
-d"sbit=__declspec(selectany) boolx" // the __declspec(selectany) has the ...
-d"sfr=__declspec(selectany) unsigned char"     // effect of allowing ...
-d"sfr16=__declspec(selectany) unsigned short"  // multiple definitions.

-e34    // ignore complaints about non-constant initializers.
        // this is because of things like:
        // sbit  ResetClock = P3^3;
-e430   // ignore complaints about @ mask for function definitions.
-e557   // ignore complaints about not recognizing printf formats
-sp3    // size of generic pointer is 3 bytes

+rw(xdata,pdata,data,bdata,idata,code)   // ignore these keywords
+rw(small,compact,large,alien)

-dreentrant=    // ignore reentrant

+d__MODEL__=0     // set memory model to small
+d__C51__=401     // set C51 compiler version to 4.01
+d__DATE__="09/05/95" // set C51 compiler date macro
+d__TIME__="11:55:00" // set C51 compiler time macro
+d__FILE__="MYFILE.C" // set C51 compiler file macro
+d__LINE__=100        // set C51 compiler line macro
+d__STDC__=1          // set C51 compiler STDC macro

    // But since these types take initializers, objects like those
    // below are considered to be multiply defined if they appear in
    // more than one module.  Ergo we suppress 14 - Multiply-defined.
    // Oh what a tangled web we weave ...
-esym(14,AA,AC,ACC,ACH0,ACH1,ACH2,ACH3,ACMP,ADCH,ADCON,ADCON0)
-esym(14,ADCON1,ADDAT,ADEX,ADM,ADR0,ADR1,ADR2,ADR3,ADRES,ADRES0,ADRES1)
-esym(14,ADRES2,ADRES3,ADRES4,ADRES5,ADRES6,ADRES7,AE,AMSK0,AMSK1,ARCON,AUXR)
-esym(14,B,BAUD,BCRH0,BCRH1,BCRL0,BCRL1,BD,BGEN,BKOFF,BSY,C1)
-esym(14,C1CAP0H,C1CAP0L,C1CAP1H,C1CAP1L,C1CAP2H,C1CAP2L,C1CAP3H,C1CAP3L,C1CAP4H,C1CAP4L,C1CAPM0)
-esym(14,C1CAPM1,C1CAPM2,C1CAPM3,C1CAPM4,C1CF0,C1CF1,C1CF2,C1CF3,C1CF4,C1CON,C1EX0)
-esym(14,C1EX1,C1EX2,C1EX3,C1EX4,C1MOD,CBP,CC1,CC2,CC3,CC4,CC4EN)
-esym(14,CCAP0H,CCAP0L,CCAP1H,CCAP1L,CCAP2H,CCAP2L,CCAP3H,CCAP3L,CCAP4H,CCAP4L,CCAPM0)
-esym(14,CCAPM1,CCAPM2,CCAPM3,CCAPM4,CCEN,CCF0,CCF1,CCF2,CCF3,CCF4,CCH1)
-esym(14,CCH2,CCH3,CCH4,CCL1,CCL2,CCL3,CCL4,CCON,CEX0,CEX1,CEX2)
-esym(14,CEX3,CEX4,CF,CF1,CH,CH1,CIN,CL,CL1,CLK,CM0)
-esym(14,CM1,CM2,CM3,CM4,CM5,CM6,CM7,CMEN,CMH0,CMH1,CMH2)
-esym(14,CMH3,CMH4,CMH5,CMH6,CMH7,CMI0,CMI1,CMI2,CML0,CML1,CML2)
-esym(14,CML3,CML4,CML5,CML6,CML7,CMOD,CMSEL,COUT,CPRL2,CP_RL2,CR)
-esym(14,CR0,CR1,CRC,CRCE,CRCH,CRCL,CRE,CSR,CT2,CTCON,CTH0)
-esym(14,CTH1,CTH2,CTH3,CTI0,CTI1,CTI2,CTI3,CTL0,CTL1,CTL2,CTL3)
-esym(14,CTREL,CTRELH,CTRELL,CY,C_T2,DAPR,DARH0,DARH1,DARL0,DARL1,DCON0)
-esym(14,DCON1,DEN,DMA,DPH,DPL,DPSEL,EA,EAD,EADC,EAI,EAL)
-esym(14,EC,ECI,ECM0,ECM1,ECM2,ECT0,ECT1,ECT2,ECT3,EDMA0,EDMA1)
-esym(14,EFIFO,EGSRE,EGSRV,EGSTE,EGSTV,ENS1,ES,ES0,ES1,ET0,ET1)
-esym(14,ET2,Ex,EX0,EX1,EX2,EX3,EX4,EX5,EX6,EXEN2,EXF2)
-esym(14,EXICON,F0,F1,FE,FIN,FOUT,FRZ,GMOD,GREN,GRXD,GTXD)
-esym(14,HABEN,HCON,HLD,HLDA,HSTAT,I2FR,I3FR,IADC,IBF,ICII,ICOI)
-esym(14,IDSM,IE,IE0,IE1,IEA,IEN0,IEN1,IEN2,IEP,IEX2,IEX3)
-esym(14,IEX4,IEX5,IEX6,IFI,IFRS,IFS,IMIN,IMOUT,INT0,INT1,INT2)
-esym(14,INT3,INT4,INT5,INT6,IP,IP0,IP1,IPA,IPA1,IPN1,IRCON)
-esym(14,IRPR,IT0,IT1,ITHR,IWPR,LNI,MA0,MA1,MB0,MB1,MD0)
-esym(14,MD1,MD2,MD3,MD4,MD5,MODE,MX0,MX1,MX2,MYSLOT,NOACK)
-esym(14,OBF,OBFC,OFDCON,OFI,OFRS,ORPR,OTHR,OV,OVR,OWPR,P)
-esym(14,P0,P1,P2,P3,P4,P5,P6,P7,P8,PAD,PAI)
-esym(14,PCM0,PCM1,PCM2,PCON,PCT0,PCT1,PCT2,PCT3,PDMA0,PDMA1,PFIFO)
-esym(14,PGSRE,PGSRV,PGSTE,PGSTV,PPC,PRBS,PS,PS0,PS1,PSW,PT0)
-esym(14,PT1,PT2,PWM0,PWM1,PWMP,PX0,PX1,RB8,RCABT,RCAP2H,RCAP2L)
-esym(14,RCLK,RD,RDN,REN,RFIFO,RFNE,RI,RS0,RS1,RSTAT,RTE)
-esym(14,RXC,RXD,S0BUF,S0CON,S1ADR,S1BUF,S1CON,S1DAT,S1REL,S1STA,SADDR)
-esym(14,SADEN,SARH0,SARH1,SARL0,SARL1,SBUF,SCON,SEPCLK,SEPCON,SEPDAT,SEPIO)
-esym(14,SEPSTA,SI,SLCON,SLOTTM,SM0,SM1,SM2,SP,SSTAT,STA,STE)
-esym(14,STO,SWDT,T0,T1,T2,T20V,T2CM,T2CON,T2EX,T2I0,T2I1)
-esym(14,T2IE,T2IP,T2MOD,T2PS,T2R0,T2R1,T2RSE,T3,TB8,TCDCNT,TCDT)
-esym(14,TCLK,TCON,TDN,TEN,TF0,TF1,TF2,TFIFO,TFNF,TH0,TH1)
-esym(14,TH2,TI,TL0,TL1,TL2,TM2CON,TM2IR,TMH2,TML2,TMOD,TR0)
-esym(14,TR1,TR2,TSTAT,TXC,TXD,UR,WDT,WDTCON,WDTDIS,WDTH,WDTL)
-esym(14,WDTLB,WDTREL,WDTUB,WR,XPAGE,SRELL,SYSCON,SRELH,ADDATH,ADDATL)

//  The following functions exhibit variable return modes.
//  That is, they may equally-usefully be called for a value
//  as called just for their effects.  Accordingly we inhibit
//  Warning 534 for these functions.
//  Feel free to add to or subtract from this list.

-esym(534,close,creat,fclose,fprintf,fputc)
-esym(534,fputs,fscanf,fseek,fwrite,lseek,memcpy,memmove,memset)
-esym(534,printf,putchar,puts,scanf,sprintf,sscanf,strcat,strcpy)
-esym(534,strncat,strncpy,unlink,write)

-emacro(413,offsetof)  // use of NULL pointer creates a stir
-emacro(545,offsetof)  // addressing an array member is OK

// Set warning level to 1=errors/fatal errors only 2=warnings 3=info
-w1

// Set Lint i C90-mode, as Keil's C51 is based on C90
// See the Lint dokumentation, section 5.7, page 64
-A(C90)
-elib(950)

// (Either this or the above.)
// Disable _Bool as a keyword
// -rw(_Bool)


// Disable warnings about multiple inclusion of header files
// (We use inclusion guards to avoid any problems from multiple inclusion)
 -e537

 // Enable elective warning on unused includes
// +e964

// Disable warning 835 ("A zero has been given as [left/right] argument to operator 'Name'")
// This is not a "serious" warning, it is at informational level.  The reason it
// is disabled is that pdu field offsets are computed as (multi-level) sums of
// field offset/field size values, where the first offset typically is zero, provoking
// this warning ("A zero has been given as left argument to operator '+'").
-e835

// We allow the "while(1)" form of an infinite loop
-e716

// Suppress warning 655/656 "bit-wise/arithmetic operation uses (compatible) enums" to permit logical operations on enums
-e655
-e656

// Suppress warning 641 "Converting enum to int" - practically always issued together with 655/656.
// In our context practically a false warning - we use enums for (named) limited range numerics
-e641


// Supress warning 522 "Highest function ’Name’ lacks side-effects". In our context this is
// practially always a false warning; disabling it for every call clutters up the source
-e522

// Supress warning 641 "Converting enum to int" - this warning is issued with all bit operations on enums.
// The Keil compiler treats enums as ints anyway, not as a strong type, and we do a lot of those bit operation.
-e641

// m_* symbols are module local by our naming rules.
// Warnings about different modules having different definitions have no value
-esym(452,m_*,M_*)
-esym(833,m_*,M_*)

// Callbacks are called from lower layers, so suppress warnings that they are not called anywhere
// All the functions that we name *_callback are of this kind, so as long as this naming convention
// is honored, disabling these warnings can be done at no risk.
// Warning 765, "external 'Symbol' (Location) could be made static" is not valid for these callbacks, so we disable the warning
// The same applies to *_isr; We can not make the ISRs static since we need to be able to link to them in the ROM
-esym(714,*_callback, *_isr)
-esym(765,*_callback, *_isr)
-esym(528,*_callback, *_isr)

// Library functions memcpy, memcmp etc. are declared with pointer arguments that are not declared as const, even when
// the argument is a source that is never modified by the function, causing lint to issue warning 605:
// "Increase in pointer capability" for every call
// The warning is disabled for calls to these functions only (note: disabling applies to all the function parameters!)
-ecall(605,memcpy,memcmp,strlen)


/* Suppress Lint warning 14 ("Symbol previously defined") for symbols from reg24b1.h */
/* Updated for version 1127 of reg24b1.h */

-esym(14,MEMCON)
-esym(14,P0)
-esym(14,SP)
-esym(14,DPL)
-esym(14,DPH)
-esym(14,DPL1)
-esym(14,DPH1)
-esym(14,WDTREL)
-esym(14,PCON)
-esym(14,TCON)
-esym(14,TMOD)
-esym(14,TL0)
-esym(14,TL1)
-esym(14,TH0)
-esym(14,TH1)
-esym(14,CKCON)
-esym(14,P1)
-esym(14,DPS)
-esym(14,P1DIR)
-esym(14,P2DIR)
-esym(14,P3DIR)
-esym(14,P0DIR)
-esym(14,S0CON)
-esym(14,S0BUF)
-esym(14,IEN2)
-esym(14,S1CON)
-esym(14,S1BUF)
-esym(14,S1RELL)
-esym(14,P2)
-esym(14,CLKCTL)
-esym(14,PWRDWN)

-esym(14,WUCONF)
-esym(14,INTEXP)
-esym(14,IEN0)
-esym(14,IP0)
-esym(14,S0RELL)
-esym(14,P3)
-esym(14,RSTRES)
-esym(14,SSRXDSZ)
-esym(14,IEN1)

-esym(14,IP1)
-esym(14,S0RELH)
-esym(14,S1RELH)
-esym(14,SSCONF0)
-esym(14,SSCONF1)
-esym(14,SSSTAT)
-esym(14,SSDAT)
-esym(14,IRCON)
-esym(14,CCEN)
-esym(14,CCL1)
-esym(14,CCH1)
-esym(14,CCL2)
-esym(14,CCH2)
-esym(14,CCL3)
-esym(14,CCH3)
-esym(14,T2CON)

-esym(14,CRCL)
-esym(14,CRCH)
-esym(14,TL2)
-esym(14,TH2)
-esym(14,PSW)
-esym(14,WDCON)
-esym(14,ACC)
-esym(14,RFDAT)
-esym(14,RFCTL)
-esym(14,RFCON)
-esym(14,MD0)
-esym(14,MD1)
-esym(14,MD2)
-esym(14,MD3)
-esym(14,MD4)
-esym(14,MD5)
-esym(14,ARCON)
-esym(14,B)


-esym(14,BRADDR)
-esym(14,BRDATA)
-esym(14,BRSIGNAL)
-esym(14,BRSTATUS)
-esym(14,BRMASTERCTRL)

-esym(14,FSR)
-esym(14,FPCR)
-esym(14,FCR)
-esym(14,SMCONF0)
-esym(14,SMCONF1)
-esym(14,SMSTAT)
-esym(14,SMDAT)
-esym(14,CC1)
-esym(14,CC2)
-esym(14,CC3)
-esym(14,CRC)
-esym(14,T2)

/*  FSR  */
-esym(14,MCDIS)
-esym(14,STP)
-esym(14,WEN)
-esym(14,RDYN)
-esym(14,INFEN)
-esym(14,RDIS)
-esym(14,RDEND)
-esym(14,WPEN)

/*  PSW   */
-esym(14,CY)
-esym(14,AC)
-esym(14,F0)
-esym(14,RS1)
-esym(14,RS0)
-esym(14,OV)
-esym(14,P)

/*  TCON  */
-esym(14,TF1)
-esym(14,TR1)
-esym(14,TF0)
-esym(14,TR0)
-esym(14,IE1)
-esym(14,IT1)
-esym(14,IE0)
-esym(14,IT0)

/*  S0CON  */
-esym(14,SM0)
-esym(14,SM1)
-esym(14,SM20)
-esym(14,REN0)
-esym(14,TB80)
-esym(14,RB80)
-esym(14,TI0)
-esym(14,RI0)

/*  T2CON  */
-esym(14,T2PS)
-esym(14,I3FR)
-esym(14,I2FR)
-esym(14,T2R1)
-esym(14,T2R0)
-esym(14,T2CM)
-esym(14,T2I1)
-esym(14,T2I0)

/*  IEN0  */
-esym(14,EAL)
-esym(14,WDT)
-esym(14,ET2)
-esym(14,ES0)
-esym(14,ET1)
-esym(14,EX1)
-esym(14,ET0)
-esym(14,EX0)

/* IEN1  */
-esym(14,EXEN2)
-esym(14,SWDT)
-esym(14,EX6)
-esym(14,EX5)
-esym(14,EX4)
-esym(14,EX3)
-esym(14,EX2)
-esym(14,EADC)

/* IRCON */
-esym(14,EXF2)
-esym(14,TF2)
-esym(14,IEX6)
-esym(14,IEX5)
-esym(14,IEX4)
-esym(14,IEX3)
-esym(14,IEX2)
-esym(14,IADC)

/* PORT0 */
-esym(14,P00)
-esym(14,P01)
-esym(14,P02)
-esym(14,P03)
-esym(14,MCSN)
-esym(14,SCSN)
-esym(14,P04)
-esym(14,P05)
-esym(14,P06)

/* RFCON */
-esym(14,RFCE)
-esym(14,RFCSN)
-esym(14,RFCKEN)

/* WDCON */
-esym(14,BD)


-esym(14,P20)
-esym(14,P21)
-esym(14,P22)
-esym(14,P23)
-esym(14,P24)
-esym(14,P25)
-esym(14,P26)
-esym(14,P27)

/* Suppress Lint warning 14 ("Symbol previously defined") for symbols from the Wibree file debug.h */
-esym(14,DEBUG_PIN0)
-esym(14,DEBUG_PIN1)
-esym(14,DEBUG_PIN2)
-esym(14,DEBUG_PIN3)
-esym(14,DEBUG_PIN4)
-esym(14,DEBUG_PIN5)
-esym(14,DEBUG_PIN6)
-esym(14,DEBUG_PIN7)

/* Suppress Lint warning 18 (Symbol <..> redeclared strong) for sbit symbols from reg24b1.h */
/* The issue is that the lint-file for Keil C51 (co-kc51.lnt) defines "sbit" */
/* as a bool, and bool is defined as a strong type in our stdbool.h. */
/* When the reg24b1.h is included before stdbool.h, and then again after stdbool.h */
/* (which can happen due to to included files including other files), this warning */
/* is given, as the sbits are taken as a normal type the first time, and a strong  */
/* the second time. */
-esym(18,AC)
-esym(18,BD)
-esym(18,CY)
-esym(18,EADC)
-esym(18,EAL)
-esym(18,ES0)
-esym(18,ET0)
-esym(18,ET1)
-esym(18,ET2)
-esym(18,EX0)
-esym(18,EX1)
-esym(18,EX2)
-esym(18,EX3)
-esym(18,EX4)
-esym(18,EX5)
-esym(18,EX6)
-esym(18,EXEN2)
-esym(18,EXF2)
-esym(18,EXTINT3IE)
-esym(18,F0)
-esym(18,I2FR)
-esym(18,I3FR)
-esym(18,IADC)
-esym(18,IE0)
-esym(18,IE1)
-esym(18,IEX2)
-esym(18,IEX3)
-esym(18,IEX4)
-esym(18,IEX5)
-esym(18,IEX6)
-esym(18,INFEN)
-esym(18,IT0)
-esym(18,IT1)
-esym(18,MCDIS)
-esym(18,OV)
-esym(18,P)
-esym(18,P00)
-esym(18,P01)
-esym(18,P02)
-esym(18,P03)
-esym(18,P04)
-esym(18,P05)
-esym(18,P06)
-esym(18,P07)
-esym(18,P10)
-esym(18,P11)
-esym(18,P12)
-esym(18,P13)
-esym(18,P14)
-esym(18,P15)
-esym(18,P16)
-esym(18,P17)
-esym(18,P20)
-esym(18,P21)
-esym(18,P22)
-esym(18,P23)
-esym(18,P24)
-esym(18,P25)
-esym(18,P26)
-esym(18,P27)
-esym(18,P30)
-esym(18,P31)
-esym(18,P32)
-esym(18,P33)
-esym(18,P34)
-esym(18,P35)
-esym(18,P36)
-esym(18,P37)
-esym(18,RB80)
-esym(18,RDEND)
-esym(18,RDIS)
-esym(18,RDYN)
-esym(18,REN0)
-esym(18,RFCE)
-esym(18,RFCKEN)
-esym(18,RFCSN)
-esym(18,RI0)
-esym(18,RS0)
-esym(18,RS1)
-esym(18,SM0)
-esym(18,SM1)
-esym(18,SM20)
-esym(18,STP)
-esym(18,SWDT)
-esym(18,T2CM)
-esym(18,T2I0)
-esym(18,T2I1)
-esym(18,T2PS)
-esym(18,T2R0)
-esym(18,T2R1)
-esym(18,TB80)
-esym(18,TF0)
-esym(18,TF1)
-esym(18,TF2)
-esym(18,TI0)
-esym(18,TR0)
-esym(18,TR1)
-esym(18,WDT)
-esym(18,WEN)
-esym(18,WPEN)
